---
const { project } = Astro.props;
import { Image } from "astro:assets";

const files = import.meta.glob("../images/*.{jpg,png,webp}", {
  eager: true,
}) as Record<string, { default: string }>;

function getImagePath(name: string | undefined): string | null {
  if (!name) return null;
  const key = Object.keys(files).find((path) => path.endsWith("/" + name));
  return key ? files[key].default : null;
}

const imageData = project.images
  .map((img: { filename: string; description: string }) => ({
    ...img,
    src: getImagePath(img.filename),
  }))
  .filter((img: { filename: string; description: string; src: string | null }) => img.src);

const mainImage = imageData[0];
const thumbnails = imageData.slice(1, 3);
---

<!-- Tarjeta del Proyecto -->
<div
  class="card hover:shadow-lg transition overflow-hidden max-w-md mx-auto border-smooth"
  data-modal-group
>
  <div>
    <h3 class="text-xl font-bold text-gray-900 mb-1">{project.title}</h3>
    <p class="text-gray-600 text-sm mb-4 leading-relaxed">{project.description}</p>

    {mainImage && (
      <button
        class="block w-full mb-3"
        data-modal-img={mainImage.filename}
        data-modal-desc={mainImage.description}
        type="button"
      >
        <Image
          src={mainImage.src}
          alt={mainImage.description}
          width={800}
          height={450}
          class="w-full h-48 object-cover rounded-lg transition-transform hover:scale-105"
        />
      </button>
    )}

    {thumbnails.length > 0 && (
      <div class="flex gap-2 mb-4">
        {thumbnails
          .filter((img: { src: string | null }) => img.src !== null)
          .map((img: { filename: string; description: string; src: string | null }) => (
            <button
              data-modal-img={img.filename}
              data-modal-desc={img.description}
              class="w-full"
              type="button"
            >
              <Image
                src={img.src as string}
                alt={img.description}
                width={300}
                height={200}
                class="w-full h-20 object-cover rounded-md flex-1 transition-transform hover:scale-105"
              />
            </button>
          ))}
      </div>
    )}

    {project.demo && (
      <a
        href={project.demo}
        target="_blank"
        class="block text-center bg-blue-600 text-white text-sm font-semibold py-2 rounded-lg hover:bg-blue-700 transition"
      >
        Ver demo
      </a>
    )}

    {project.skills && project.skills.length > 0 && (
      <div class="flex flex-wrap gap-3 mt-4 mb-2 justify-center md:justify-start">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@iconify/iconify@3.1.1/dist/iconify.min.css" />
        <script src="https://code.iconify.design/3/3.1.1/iconify.min.js"></script>
        {project.skills.map((skill:{name:string, icon:string}) => (
          <span class="bg-blue-100 text-blue-700 px-4 py-1 rounded-full text-sm font-medium shadow-smooth flex items-center gap-2">
            {skill.icon && (
              <span class="iconify" data-icon={skill.icon} style="font-size: 1.2em;"></span>
            )}
            {skill.name}
          </span>
        ))}
      </div>
    )}

    
  </div>
</div>

<!-- Modal -->
<div
  id="modal"
  class="fixed inset-0 bg-black/70 hidden items-center justify-center z-50"
  role="dialog"
  aria-modal="true"
>
  <div
    class="relative bg-white rounded-xl shadow-lg w-[600px] h-[400px] flex flex-col p-4 box-border"
  >
    <button
      type="button"
      aria-label="Cerrar modal"
      onclick="closeModal()"
      class="absolute top-2 right-3 text-2xl text-gray-600 hover:text-gray-900 cursor-pointer"
    >
      Ã—
    </button>

    <button
  onclick="showPrev()"
  class="absolute left-2 top-1/2 -translate-y-1/2 bg-gray-800 text-white rounded-full w-10 h-10 flex items-center justify-center shadow-md hover:bg-gray-900 transition"
  aria-label="Previous image"
>
  <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
    <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
  </svg>
</button>

<button
  onclick="showNext()"
  class="absolute right-2 top-1/2 -translate-y-1/2 bg-gray-800 text-white rounded-full w-10 h-10 flex items-center justify-center shadow-md hover:bg-gray-900 transition"
  aria-label="Next image"
>
  <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
    <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
  </svg>
</button>

    <img
      id="modal-img"
      src=""
      alt=""
      class="flex-grow max-w-full max-h-[calc(100%-3rem)] object-contain mb-2 mx-auto"
    />

    <p
      id="modal-desc"
      class="h-12 text-center text-gray-700 text-sm flex items-center justify-center m-0 select-none"
    ></p>
  </div>
</div>

<script>
  // Extend the Window interface to include custom properties
  interface Window {
    showNext: () => void;
    showPrev: () => void;
    closeModal: () => void;
  }

  const modal = document.getElementById("modal");
  const modalImg = document.getElementById("modal-img");
  const modalDesc = document.getElementById("modal-desc");

  let images: { src: string | null; desc: string | null }[] = [];
  let currentIndex = 0;

  function showImage(index: number) {
    if (!images[index]) return;
    currentIndex = index;
    if (modalImg instanceof HTMLImageElement) {
      modalImg.src = "src/images/" + images[index].src;
      modalImg.alt = images[index].desc || "";
    }
    if (modalDesc) {
      modalDesc.textContent = images[index].desc || "";
    }
  }

  function showNext() {
    if (images.length === 0) return;
    const next = (currentIndex + 1) % images.length;
    showImage(next);
  }

  function showPrev() {
    if (images.length === 0) return;
    const prev = (currentIndex - 1 + images.length) % images.length;
    showImage(prev);
  }

  function closeModal() {
    if(!modal) return;
    if (modalImg instanceof HTMLImageElement) {
      modalImg.src = "";
    }
    modal.classList.add("hidden");
    modal.classList.remove("flex");
    if (modalDesc) {
      modalDesc.textContent = "";
    }
    images = [];
    currentIndex = 0;
  }

  document.querySelectorAll("[data-modal-group]").forEach((groupEl) => {
    const buttons = groupEl.querySelectorAll("[data-modal-img]");

    const groupImages = Array.from(buttons).map((btn) => ({
      src: btn.getAttribute("data-modal-img"),
      desc: btn.getAttribute("data-modal-desc"),
    }));

    buttons.forEach((btn, index) => {
      btn.addEventListener("click", () => {
        images = groupImages;
        showImage(index);
        if (!modal) return;
        modal.classList.remove("hidden");
        modal.classList.add("flex");
      });
    });
  });

  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") closeModal();
    if (e.key === "ArrowRight") showNext();
    if (e.key === "ArrowLeft") showPrev();
  });

  if (modal) {
    modal.addEventListener("click", (e) => {
      if (e.target === modal) closeModal();
    });
  }

  (window as any).showNext = showNext;
  (window as any).showPrev = showPrev;
  (window as any).closeModal = closeModal;
</script>
